<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <HasSharedItems>true</HasSharedItems>
    <SharedGUID>12d024ee-d0a5-4bbc-b7c0-7b18cf1ab262</SharedGUID>
  </PropertyGroup>
  <PropertyGroup Label="Configuration">
    <Import_RootNamespace>Emgu.CV</Import_RootNamespace>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="$(MSBuildThisFileDirectory)Core\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Videoio\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Features2D\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Flann\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Geodetic\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)PInvoke\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Reflection\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Tiff\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Ocl\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Util\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Cvb\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Color\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Photo\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Viz\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)PointAndLine\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Video\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Optflow\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Shape\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Stitching\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Superres\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Videostab\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Ml\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)Dnn\*.cs" />
	<Compile Include="$(MSBuildThisFileDirectory)Objdetect\*.cs" />
	<Compile Include="$(MSBuildThisFileDirectory)Imgproc\*.cs" />
	<Compile Include="$(MSBuildThisFileDirectory)Calib3d\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)PInvoke\CvType\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)PInvoke\Windows.Store\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)PInvoke\System.Drawing\*.cs" />
	<Compile Include="$(MSBuildThisFileDirectory)PInvoke\CvEnum\*.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)PInvoke\iOS\ImageiOS.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)PInvoke\iOS\MatiOS.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)PInvoke\iOS\UMatiOS.cs" />
  </ItemGroup>
  <PropertyGroup>
    <OpenCVBinaryDir>$(MSBuildThisFileDirectory)..\libs</OpenCVBinaryDir>
    <EmguCVDir>$(MSBuildThisFileDirectory)</EmguCVDir>
  </PropertyGroup>
  <Choose>
    <!-- IOS -->
    <!-- IOS library project -->
    <When Condition="(('$(TargetFrameworkIdentifier)'=='Xamarin.iOS' OR '$(ProjectTypeGuids)'=='{8FFB629D-F513-41CE-95D2-7ECE97B6EEEC};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}' OR '$(Platform)'=='iPhone' OR '$(Platform)'=='iPhoneSimulator') AND '$(OutputType)' != 'Exe')">
      <PropertyGroup>
        <EmguCVLinkTarget>Xamarin iOS Native Binding Library</EmguCVLinkTarget>
        <EmguCVNativeFile>$(OpenCVBinaryDir)\iOS\libcvextern.a</EmguCVNativeFile>
        <EmguCVErrorMessage Condition="!Exists('$(EmguCVNativeFile)')"> This package do not contain necessary binary for $(EmguCVLinkTarget). Emgu CV for iOS Commercial License is required. Missing $(EmguCVNativeFile) </EmguCVErrorMessage>
        <EmguCVDeployMessage Condition="Exists('$(EmguCVNativeFile)')">$(EmguCVDeployMessage)ios </EmguCVDeployMessage>
        <EmguCVLinkWithFile>$(EmguCVDir)PInvoke\iOS\libcvextern.linkwith.cs</EmguCVLinkWithFile>
        <EmguCVErrorMessage Condition="!Exists('$(EmguCVLinkWithFile)')"> This package do not contain necessary file for $(EmguCVLinkTarget). Emgu CV for iOS Commercial License is required. Missing $(EmguCVLinkWithFile) </EmguCVErrorMessage>
      </PropertyGroup>
      <ItemGroup>
        <ObjcBindingNativeLibrary Include="$(EmguCVNativeFile)" Condition="Exists('$(EmguCVNativeFile)')" />
      </ItemGroup>
      <ItemGroup>
        <Compile Include="$(EmguCVLinkWithFile)" Condition="Exists('$(EmguCVLinkWithFile)')">
          <DependentUpon>libcvextern.a</DependentUpon>
        </Compile>
      </ItemGroup>
    </When>
    <!-- Xamarin.Mac application -->
    <When Condition="'$(TargetFrameworkIdentifier)'=='Xamarin.Mac' OR '$(ProjectTypeGuids)'=='{810C163F-4746-4721-8B8E-88A3673A62EA};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}'">
      <PropertyGroup>
        <EmguCVLinkTarget>Xamarin.Mac</EmguCVLinkTarget>
        <EmguCVNativeFile>$(OpenCVBinaryDir)\osx\libcvextern.dylib</EmguCVNativeFile>
        <EmguCVErrorMessage Condition="!Exists('$(EmguCVNativeFile)')"> This package do not contain necessary binary for $(EmguCVLinkTarget). Emgu CV for Mac Commercial License is required. Missing $(EmguCVNativeFile) </EmguCVErrorMessage>
        <EmguCVDeployMessage Condition="Exists('$(EmguCVNativeFile)')">$(EmguCVDeployMessage)mac </EmguCVDeployMessage>
      </PropertyGroup>
      <ItemGroup>
        <NativeReference Include="$(EmguCVNativeFile)">
          <Kind>Dynamic</Kind>
          <SmartLink>False</SmartLink>
        </NativeReference>
      </ItemGroup>
    </When>
    <!-- IOS application (Note: do not work for Xamarin iOS for Visual Studio) -->
    <When Condition="(('$(TargetFrameworkIdentifier)'=='Xamarin.iOS' OR '$(ProjectTypeGuids)'=='{8FFB629D-F513-41CE-95D2-7ECE97B6EEEC};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}' OR '$(ProjectTypeGuids)'=='{FEACFBD2-3405-455C-9665-78FE426C6842};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}' OR '$(Platform)'=='iPhone' OR '$(Platform)'=='iPhoneSimulator') AND '$(OutputType)' == 'Exe')">
      <PropertyGroup>
        <EmguCVErrorMessage Condition="'$(OS)' == 'Windows_NT'"> Direct reference of Emgu CV for Xamarin iOS is only available with Xamarin Studio on Mac. When using Emgu CV in Visual Studio with Xamarin iOS plug in, please add the Emgu.CV.iOS.World reference instead.</EmguCVErrorMessage>
        <EmguCVLinkTarget>Xamarin iOS App</EmguCVLinkTarget>
        <EmguCVNativeFile>$(OpenCVBinaryDir)\iOS\libcvextern.a</EmguCVNativeFile>
        <EmguCVErrorMessage Condition="!Exists('$(EmguCVNativeFile)')"> This package do not contain necessary binary for $(EmguCVLinkTarget). Emgu CV for iOS Commercial License is required. Missing $(EmguCVNativeFile) </EmguCVErrorMessage>
        <MtouchExtraArgs>$(MtouchExtraArgs) -cxx -gcc_flags "-L$(OpenCVBinaryDir)\iOS\ -lcvextern -force_load $(OpenCVBinaryDir)\iOS\libcvextern.a -framework Foundation -framework Accelerate -framework CoreFoundation -framework CoreGraphics -framework AssetsLibrary -framework AVFoundation -framework CoreImage -framework CoreMedia -framework CoreVideo -framework QuartzCore -framework ImageIO -framework UIKit"</MtouchExtraArgs>
        <EmguCVDeployMessage Condition="Exists('$(EmguCVNativeFile)')">$(EmguCVDeployMessage)ios </EmguCVDeployMessage>
      </PropertyGroup>
    </When>
    <!-- Android -->
    <When Condition="('$(AndroidSupportedAbis)'!='') OR '$(ProjectTypeGuids)'=='{EFBA0AD7-5A72-4C68-AF49-83D382785DCF};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}'">
      <PropertyGroup>
        <EmguCVLinkTarget Condition="('$(AndroidApplication)'=='True' OR '$(AndroidApplication)'=='true')">Xamarin Android App</EmguCVLinkTarget>
        <EmguCVLinkTarget Condition="!('$(AndroidApplication)'=='True' OR '$(AndroidApplication)'=='true')">Xamarin Android Library</EmguCVLinkTarget>
        <!-- 
		<EmguCVNativeArmeabi>$(OpenCVBinaryDir)\android\armeabi\libcvextern.so</EmguCVNativeArmeabi>
        <EmguCVBuildAndroidArmeabi Condition="$(AndroidSupportedAbis.Contains('armeabi%3')) OR $(AndroidSupportedAbis.Contains('armeabi,')) OR $(AndroidSupportedAbis.Contains('armeabi;')) OR $(AndroidSupportedAbis.EndsWith('armeabi')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU') OR ('$(Platform)'=='armeabi')">True</EmguCVBuildAndroidArmeabi>
        <EmguCVErrorMessage Condition="'$(EmguCVBuildAndroidArmeabi)'=='True' AND !Exists('$(EmguCVNativeArmeabi)')">This package do not contain necessary binary for $(EmguCVLinkTarget). Emgu CV for Android Commercial License is required. Armeabi is targeted, but file $(EmguCVNativeArmeabi) is missing.</EmguCVErrorMessage>
        <EmguCVDeployMessage Condition="'$(EmguCVBuildAndroidArmeabi)'=='True' AND Exists('$(EmguCVNativeArmeabi)')">$(EmguCVDeployMessage)armeabi </EmguCVDeployMessage>
		-->
        <EmguCVNativeArmeabiv7a>$(OpenCVBinaryDir)\android\armeabi-v7a\libcvextern.so</EmguCVNativeArmeabiv7a>
        <EmguCVBuildAndroidArmeabiv7a Condition="$(AndroidSupportedAbis.Contains('armeabi-v7a%3')) OR $(AndroidSupportedAbis.Contains('armeabi-v7a,')) OR $(AndroidSupportedAbis.Contains('armeabi-v7a;')) OR $(AndroidSupportedAbis.EndsWith('armeabi-v7a')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU') OR ('$(Platform)'=='armeabi-v7a')">True</EmguCVBuildAndroidArmeabiv7a>
        <EmguCVErrorMessage Condition="'$(EmguCVBuildAndroidArmeabiv7a)'=='True' AND !Exists('$(EmguCVNativeArmeabiv7a)')">This package do not contain necessary binary for $(EmguCVLinkTarget). Emgu CV for Android Commercial License is required. Armeabi-v7a is targeted, but file $(EmguCVNativeArmeabiv7a) is missing.</EmguCVErrorMessage>
        <EmguCVDeployMessage Condition="'$(EmguCVBuildAndroidArmeabiv7a)'=='True' AND Exists('$(EmguCVNativeArmeabiv7a)')">$(EmguCVDeployMessage)armeabi-v7a </EmguCVDeployMessage>
        <EmguCVNativeArm64v8a>$(OpenCVBinaryDir)\android\arm64-v8a\libcvextern.so</EmguCVNativeArm64v8a>
        <EmguCVBuildAndroidArm64v8a Condition="$(AndroidSupportedAbis.Contains('arm64-v8a%3')) OR $(AndroidSupportedAbis.Contains('arm64-v8a,')) OR $(AndroidSupportedAbis.EndsWith('arm64-v8a;')) OR $(AndroidSupportedAbis.EndsWith('arm64-v8a')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU')  OR ('$(Platform)'=='arm64-v8a')">True</EmguCVBuildAndroidArm64v8a>
        <EmguCVErrorMessage Condition="'$(EmguCVBuildAndroidArm64v8a)'=='True' AND !Exists('$(EmguCVNativeArm64v8a)')">This package do not contain necessary binary for $(EmguCVLinkTarget). Emgu CV for Android Commercial License is required. Arm64-v8a is targeted, but file $(EmguCVNativeArm64v8a) is missing.</EmguCVErrorMessage>
        <EmguCVDeployMessage Condition="'$(EmguCVBuildAndroidArm64v8a)'=='True' AND Exists('$(EmguCVNativeArm64v8a)')">$(EmguCVDeployMessage)arm64-v8a </EmguCVDeployMessage>
        <EmguCVNativex86>$(OpenCVBinaryDir)\android\x86\libcvextern.so</EmguCVNativex86>
        <EmguCVBuildAndroidx86 Condition="$(AndroidSupportedAbis.Contains('x86%3')) OR $(AndroidSupportedAbis.Contains('x86,')) OR $(AndroidSupportedAbis.Contains('x86;')) OR $(AndroidSupportedAbis.EndsWith('x86')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU') OR ('$(Platform)'=='x86')">True</EmguCVBuildAndroidx86>
        <EmguCVErrorMessage Condition="'$(EmguCVBuildAndroidx86)'=='True' AND !Exists('$(EmguCVNativex86)')">This package do not contain necessary binary for $(EmguCVLinkTarget). Emgu CV for Android Commercial License is required. x86 is targeted, but file $(EmguCVNativex86) is missing.</EmguCVErrorMessage>
        <EmguCVDeployMessage Condition="'$(EmguCVBuildAndroidx86)'=='True' AND Exists('$(EmguCVNativex86)')">$(EmguCVDeployMessage)x86 </EmguCVDeployMessage>
        <EmguCVNativex8664>$(OpenCVBinaryDir)\android\x86_64\libcvextern.so</EmguCVNativex8664>
        <EmguCVBuildAndroidx8664 Condition="$(AndroidSupportedAbis.Contains('x86_64%3')) OR $(AndroidSupportedAbis.Contains('x86_64,')) OR $(AndroidSupportedAbis.Contains('x86_64;')) OR $(AndroidSupportedAbis.EndsWith('x86_64')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU') OR ('$(Platform)'=='x86_64')">True</EmguCVBuildAndroidx8664>
        <EmguCVErrorMessage Condition="'$(EmguCVBuildAndroidx8664)'=='True' AND !Exists('$(EmguCVNativex8664)')">This package do not contain necessary binary for $(EmguCVLinkTarget). Emgu CV for Android Commercial License is required. x86_64 is targeted, but file $(EmguCVNativex8664) is missing.</EmguCVErrorMessage>
        <EmguCVDeployMessage Condition="'$(EmguCVBuildAndroidx8664)'=='True' AND Exists('$(EmguCVNativex8664)')">$(EmguCVDeployMessage)x86_64 </EmguCVDeployMessage>
      </PropertyGroup>
      <!-- armeabi -->
	  <!--
      <ItemGroup Condition="'$(EmguCVBuildAndroidArmeabi)'=='True' AND Exists('$(EmguCVNativeArmeabi)')">
        <EmbeddedNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android Library'" Include="$(EmguCVNativeArmeabi)">
          <Link>lib\armeabi\libcvextern.so</Link>
        </EmbeddedNativeLibrary>
        <AndroidNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android App'" Include="$(EmguCVNativeArmeabi)">
          <Link>lib\armeabi\libcvextern.so</Link>
        </AndroidNativeLibrary>
      </ItemGroup>
	  -->
      <!-- armeabi-v7a -->
      <ItemGroup Condition="'$(EmguCVBuildAndroidArmeabiv7a)'=='True' AND Exists('$(EmguCVNativeArmeabiv7a)')">
        <EmbeddedNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android Library'" Include="$(EmguCVNativeArmeabiv7a)">
          <Link>lib\armeabi-v7a\libcvextern.so</Link>
        </EmbeddedNativeLibrary>
        <AndroidNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android App'" Include="$(EmguCVNativeArmeabiv7a)">
          <Link>lib\armeabi-v7a\libcvextern.so</Link>
        </AndroidNativeLibrary>
      </ItemGroup>
      <!-- arm64-v8a -->
      <ItemGroup Condition="'$(EmguCVBuildAndroidArm64v8a)'=='True' AND Exists('$(EmguCVNativeArm64v8a)')">
        <EmbeddedNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android Library'" Include="$(EmguCVNativeArm64v8a)">
          <Link>lib\arm64-v8a\libcvextern.so</Link>
        </EmbeddedNativeLibrary>
        <AndroidNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android App'" Include="$(EmguCVNativeArm64v8a)">
          <Link>lib\arm64-v8a\libcvextern.so</Link>
        </AndroidNativeLibrary>
      </ItemGroup>
      <!-- x86 -->
      <ItemGroup Condition="'$(EmguCVBuildAndroidx86)'=='True' AND Exists('$(EmguCVNativex86)')">
        <EmbeddedNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android Library'" Include="$(EmguCVNativex86)">
          <Link>lib\x86\libcvextern.so</Link>
        </EmbeddedNativeLibrary>
        <AndroidNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android App'" Include="$(EmguCVNativex86)">
          <Link>lib\x86\libcvextern.so</Link>
        </AndroidNativeLibrary>
      </ItemGroup>
      <!-- x86_64 -->
      <ItemGroup Condition="'$(EmguCVBuildAndroidx8664)'=='True' AND Exists('$(EmguCVNativex8664)')">
        <EmbeddedNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android Library'" Include="$(EmguCVNativex8664)">
          <Link>lib\x86_64\libcvextern.so</Link>
        </EmbeddedNativeLibrary>
        <AndroidNativeLibrary Condition="'$(EmguCVLinkTarget)'=='Xamarin Android App'" Include="$(EmguCVNativex8664)">
          <Link>lib\x86_64\libcvextern.so</Link>
        </AndroidNativeLibrary>
      </ItemGroup>
    </When>
    <!-- DotNetCore Application -->
    <When Condition="'$(EmguCVLinkTarget)'=='' AND ('$(TargetFramework)'=='netcoreapp1.1')">
      <PropertyGroup>
        <EmguCVLinkTarget>DotNetCore</EmguCVLinkTarget>
      </PropertyGroup>
    </When>
    <!-- NetStandard -->
    <When Condition="'$(EmguCVLinkTarget)'=='' AND ('$(TargetFramework)'=='netstandard1.4')">
      <PropertyGroup>
        <EmguCVLinkTarget>NetStandard</EmguCVLinkTarget>
      </PropertyGroup>
    </When>
  </Choose>
  <Target Name="EmguCVPackageBuildImports" BeforeTargets="PrepareForBuild">
    <Message Condition="'$(EmguCVLinkTarget)'!=''" Text="Emgu CV shared project compiling against $(EmguCVLinkTarget)" Importance="High" />
    <Error Text="'$(EmguCVErrorMessage)'" Condition="'$(EmguCVErrorMessage)'!=''" />
    <Warning Text="'$(EmguCVWarningMessage)'" Condition="'$(EmguCVWarningMessage)'!=''" />
    <Message Text="Compiling with $(EmguCVDeployMessage)binary" Condition="'$(EmguCVDeployMessage)'!=''" Importance="High" />
    <Message Text="WARNING: No native binary is being deployed by the Emgu.CV shared project. Please remember to copy the native binary to the folder of your final executable, or there will be a PInvoke runtime exception during application execution." Condition="'$(EmguCVDeployMessage)'==''" Importance="High" />
  </Target>
</Project>